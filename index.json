{
  "README.html": {
    "href": "README.html",
    "title": "NucleusWPF.MVVM | NucleusWPF.MVVM",
    "summary": "NucleusWPF.MVVM A lightweight MVVM utility library for WPF applications targeting .NET 8. Provides essential services, dependency injection, and command implementations to streamline WPF development. Features Dependency Injection: Simple container for registering and resolving services and view models (singleton and transient). Message Service: Interface and implementation for displaying messages and exceptions to users. Window Service: Interface and implementation for mapping and displaying windows based on view models. RelayCommand / AsyncRelayCommand: Synchronous and asynchronous command implementations for use in MVVM. ViewModelBase: Base class implementing INotifyPropertyChanged for property change notifications. ValidViewModel: Base class implementing INotifyDataErrorInfo for validation scenarios. Getting Started Prerequisites .NET 8 SDK WPF project (Windows only) Installation Clone or add the NucleusWPF.MVVM project to your solution: Usage DependencyInjection Registering Services Transient/Scoped Services Singleton Services Retrieving Services & ViewModels IWindowService Mapping ViewModels to Views Opening a Window Show Method ShowDialog Method"
  },
  "docs/DependencyInjection.html": {
    "href": "docs/DependencyInjection.html",
    "title": "DependencyInjection | NucleusWPF.MVVM",
    "summary": "DependencyInjection The DependencyInjection class in NucleusWPF.MVVM provides a simple dependency injection container for services and view models in your WPF application. It supports both transient and singleton lifetimes. Registering Services By default, build int services are already registered such as IMessageService. If you need to register additional services, there are a few ways to do so. Transient/Scoped Services In the \"App.xaml.cs\" file, you can register services using the Reegister method. DependencyInjection.Instance.Register<IServiceName, ServiceName>(); Singleton Services \"In the \"App.xaml.cs\" file, you ster singleton services using the RegisterSingleton methods. DendencyInjection.Instance.RegisterSingleton<IServiceName, ServiceName>(); Alternatively, you can use the RegisterSingleton method with an instance of the service: DependencyInjection.Instance.RegisterSingleton<IServiceName>(new ServiceName()); Retrieving Services & ViewModels Services and ViewModels are retreed using the same method. When ViewModels are initialized this way, DependencyInjection container will automatically resolve any dependencies it contains. var service = DependencyInjection.Instance.Resolve<IServiceName>(); var viewModel = DependencyInjection.Instance.Resolve<ViewModelName>(); To ensure ensure ViewModels are properly initialized, the constructor should contains all required dependencies. If there is more than one constructor, the container will use the one with the most parameters. public class ExampleViewMode(IMessageService _messageService) : ViewModelBase { public void SendMessage() { _messageService.Show(\"Hello World!\", \"Hello\", MessageBoxButton.OK, MessageBoxImage.Information); } }"
  },
  "docs/IWindowService.html": {
    "href": "docs/IWindowService.html",
    "title": "IWindowService | NucleusWPF.MVVM",
    "summary": "IWindowService Interface for managing windows in a WPF application. Allows for loose coupling between Views and ViewModels. Mapping ViewModels to Views Although IWindowService uses implicit mapping based on MVVM naming conventions. A ViewModel can be registered to a View explicitly using the Register method. var messageService = DependencyInjection.Instance.Resolve<IWindowService>(); messageService.Register<TViewModel, TWindow>(); Opening a Window Similar to WPF bulit in method. IWindowService provides two methods for opening windows. Show Method If you want to open a window but don't want the calling window to bocked by the new one use Show method. _windowService.Show<ExampleViewMode>(); Alternatively if you need to pass data to the ViewModel the following method can be used. var viewModel = DependencyInjection.Instance.Resolve<ExampleViewModel>(); viewModel.Data = \"Here is some sample data\"; _windowService.Show(viewModel); ShowDialog Method If you want to open a window and wait for it to be closed before continuing use ShowDialog method. _windowService.ShowDialog<ExampleViewMode>(); Alternatively if you need to pass or read data from the ViewModel the following method can be used. var viewModel = DependencyInjection.Instance.Resolve<ExampleViewModel>(); viewModel.Data = \"Here is some sample data\"; if (_windowService.ShowDialog(viewModel) == true) { // Do something with the result var resultData = viewModel.ResultData; }"
  },
  "docs/ValidViewModel.html": {
    "href": "docs/ValidViewModel.html",
    "title": "ValidViewModel | NucleusWPF.MVVM",
    "summary": "ValidViewModel Provides an implementation of INotifyDataErrorInfo and extends ViewModelBase for validation scenarios in MVVM applications. How to use Inherit the 'ValidViewModel' class in your ViewModel. Adding or removing errors from a property will notify the view. namespace ExampleProject.ViewModels { public class ExampleViewModel : ValidViewModel { private int numInput; public int NumInput { get => numInputs; set => RaiseAndValidateIfChanged(ref numInput, value, ValidateExceedsZero); } private void ValidateExceedsZero(int value, string? propertyName) { ClearErrors(propertyName); if (value <= 0) AddError(\"Value must be greater than zero.\", propertyName); } } }"
  },
  "docs/ViewModelBase.html": {
    "href": "docs/ViewModelBase.html",
    "title": "ViewModelBase | NucleusWPF.MVVM",
    "summary": "ViewModelBase Implmentation of INotifyPropertyChanged for property change notifications in MVVM. How to use Simply inherit from ViewModelBase in your ViewModel classes. It provides the needed functionality to raise property change notifications. namespace ExampleProject.ViewModels { public class ExampleViewModel : ViewModelBase { private int _myNumValue; public int MyNumValue { get => _myNumValue; set { RaiseAndSetIfChanged(ref _myNumValue, value); RaisePropertyChanged(nameof(DoubleOutput)); // Notify that DoubleOutput has changed } } public int DoubleOutput => MyNumValue * 2; } }"
  },
  "index.html": {
    "href": "index.html",
    "title": "NucleusWPF.MVVM | NucleusWPF.MVVM",
    "summary": "NucleusWPF.MVVM A lightweight MVVM utility library for WPF applications targeting .NET 8. Provides essential services, dependency injection, and command implementations to streamline WPF development. Features Dependency Injection: Simple container for registering and resolving services and view models (singleton and transient). Message Service: Interface and implementation for displaying messages and exceptions to users. Window Service: Interface and implementation for mapping and displaying windows based on view models. RelayCommand / AsyncRelayCommand: Synchronous and asynchronous command implementations for use in MVVM. ViewModelBase: Base class implementing INotifyPropertyChanged for property change notifications. ValidViewModel: Base class implementing INotifyDataErrorInfo for validation scenarios. Getting Started Prerequisites .NET 8 SDK WPF project (Windows only) Installation Clone or add the NucleusWPF.MVVM project to your solution: Usage DependencyInjection Registering Services Transient/Scoped Services Singleton Services Retrieving Services & ViewModels IWindowService Mapping ViewModels to Views Opening a Window Show Method ShowDialog Method"
  }
}