{
  "README.html": {
    "href": "README.html",
    "title": "NucleusWPF.MVVM | NucleusWPF.MVVM",
    "summary": "NucleusWPF.MVVM A lightweight MVVM utility library for WPF applications targeting .NET 8. Provides essential services, dependency injection, and command implementations to streamline WPF development. Features Dependency Injection: Simple container for registering and resolving services and view models (singleton and transient). Message Service: Interface and implementation for displaying messages and exceptions to users. Window Service: Interface and implementation for mapping and displaying windows based on view models. RelayCommand / AsyncRelayCommand: Synchronous and asynchronous command implementations for use in MVVM. ViewModelBase: Base class implementing INotifyPropertyChanged for property change notifications. ValidViewModel: Base class implementing INotifyDataErrorInfo for validation scenarios. Getting Started Prerequisites .NET 8 SDK WPF project (Windows only) Installation Clone or add the NucleusWPF.MVVM project to your solution: Usage DependencyInjection Registering Services Transient/Scoped Services Singleton Services Retrieving Services & ViewModels IWindowService Mapping ViewModels to Views Opening a Window Show Method ShowDialog Method API Docucumentation is available here"
  },
  "api/NucleusWPF.MVVM.AsyncRelayCommand-1.html": {
    "href": "api/NucleusWPF.MVVM.AsyncRelayCommand-1.html",
    "title": "Class AsyncRelayCommand<T> | NucleusWPF.MVVM",
    "summary": "Class AsyncRelayCommand<T> Namespace NucleusWPF.MVVM Assembly NucleusWPF.MVVM.dll Implentation of ICommand that supports asynchronous execution. public sealed class AsyncRelayCommand<T> Type Parameters T Specifies the type for command parameter. Inheritance object AsyncRelayCommand<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors AsyncRelayCommand(Func<T, Task>) Initializes a new instance of the AsyncRelayCommand class with the specified asynchronous execute action. public AsyncRelayCommand(Func<T, Task> execute) Parameters execute Func<T, Task> Action to be executed when invoked. Remarks This constructor creates an AsyncRelayCommand that is always enabled. Use the overload with a canExecute predicate to specify conditions under which the command is enabled. AsyncRelayCommand(Func<T, Task>, Func<bool>) Initializes a new instance of the AsyncRelayCommand class with the specified asynchronous execute action. public AsyncRelayCommand(Func<T, Task> execute, Func<bool> canExecute) Parameters execute Func<T, Task> Action to be executed when invoked. canExecute Func<bool> Predicate to determine whether the command can execute. Remarks This constructor creates an AsyncRelayCommand where CanExecute does not require a parameter. CanExecute(object?) does not require a parameter. AsyncRelayCommand(Func<T, Task>, Func<T, bool>) Initializes a new isntance of AsyncRelayCommand class. public AsyncRelayCommand(Func<T, Task> execute, Func<T, bool> canExecute) Parameters execute Func<T, Task> Action to be executed when invoked. canExecute Func<T, bool> Determines whether the command can execute. Exceptions ArgumentNullException Methods CanExecute(object?) public bool CanExecute(object? parameter) Parameters parameter object Returns bool Execute(object?) public void Execute(object? parameter) Parameters parameter object ExecuteAsync(T) Executes the command asynchronously. public Task ExecuteAsync(T t) Parameters t T The parameter to be passed to the execute action. Returns Task RaiseCanExecuteChanged() Raises the CanExecuteChanged event. public void RaiseCanExecuteChanged() Events CanExecuteChanged public event EventHandler? CanExecuteChanged Event Type EventHandler"
  },
  "api/NucleusWPF.MVVM.AsyncRelayCommand.html": {
    "href": "api/NucleusWPF.MVVM.AsyncRelayCommand.html",
    "title": "Class AsyncRelayCommand | NucleusWPF.MVVM",
    "summary": "Class AsyncRelayCommand Namespace NucleusWPF.MVVM Assembly NucleusWPF.MVVM.dll Implmentation of ICommand that supports asynchronous execution. public sealed class AsyncRelayCommand : IRelayCommand, ICommand Inheritance object AsyncRelayCommand Implements IRelayCommand ICommand Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors AsyncRelayCommand(Func<Task>) Initializes a new instance of the AsyncRelayCommand class with the specified asynchronous execute action. public AsyncRelayCommand(Func<Task> execute) Parameters execute Func<Task> Action to be executed when invoked. Remarks This constructor creates an AsyncRelayCommand that is always enabled. Use the overload with a canExecute predicate to specify conditions under which the command is enabled. AsyncRelayCommand(Func<Task>, Func<bool>) Initializes a new isntance of AsyncRelayCommand class. public AsyncRelayCommand(Func<Task> execute, Func<bool> canExecute) Parameters execute Func<Task> Action to be executed when invoked. canExecute Func<bool> Determines whether the command can execute. Exceptions ArgumentNullException Methods CanExecute(object?) Defines the method that determines whether the command can execute in its current state. public bool CanExecute(object? parameter) Parameters parameter object Data used by the command. If the command does not require data to be passed, this object can be set to null. Returns bool true if this command can be executed; otherwise, false. Execute(object?) Defines the method to be called when the command is invoked. public void Execute(object? parameter) Parameters parameter object Data used by the command. If the command does not require data to be passed, this object can be set to null. ExecuteAsync() Executes the command asynchronously. public Task ExecuteAsync() Returns Task RaiseCanExecuteChanged() Raises the CanExecuteChanged event. public void RaiseCanExecuteChanged() Events CanExecuteChanged Occurs when changes occur that affect whether or not the command should execute. public event EventHandler? CanExecuteChanged Event Type EventHandler"
  },
  "api/NucleusWPF.MVVM.DependencyInjection.html": {
    "href": "api/NucleusWPF.MVVM.DependencyInjection.html",
    "title": "Class DependencyInjection | NucleusWPF.MVVM",
    "summary": "Class DependencyInjection Namespace NucleusWPF.MVVM Assembly NucleusWPF.MVVM.dll Provides a dependency injection container for transient and singleton servies and models. public class DependencyInjection Inheritance object DependencyInjection Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Instance Gets the singleton instance of the DependencyInjection class. public static DependencyInjection Instance { get; } Property Value DependencyInjection Methods RegisterSingleton<TInterface>(TInterface) REgister an instance of an interface as a singleton. public void RegisterSingleton<TInterface>(TInterface instance) Parameters instance TInterface Implementation of interface Type Parameters TInterface Interface to be registered Exceptions ArgumentNullException RegisterSingleton<TInterface, TImplementation>() Registers an interface its implementation type as a singleton. public void RegisterSingleton<TInterface, TImplementation>() where TImplementation : TInterface, new() Type Parameters TInterface Interface to be registered. TImplementation Implementation of interface Register<TInterface, TImplementation>() Register an interface to its implementation type. public void Register<TInterface, TImplementation>() where TImplementation : TInterface Type Parameters TInterface Interface to be registered. TImplementation Implementation of interface Resolve<TInterface>() Resolves an intance of the specified interface type. public TInterface Resolve<TInterface>() Returns TInterface Returns the resolved implementation. Type Parameters TInterface Interface to resolve"
  },
  "api/NucleusWPF.MVVM.IMessageService.html": {
    "href": "api/NucleusWPF.MVVM.IMessageService.html",
    "title": "Interface IMessageService | NucleusWPF.MVVM",
    "summary": "Interface IMessageService Namespace NucleusWPF.MVVM Assembly NucleusWPF.MVVM.dll Defines methods for displaying messages to the user. public interface IMessageService Methods Show(Exception) Displays exception message to the user. void Show(Exception ex) Parameters ex Exception Exception to display Show(string, string, MessageBoxButton, MessageBoxImage) Displays a message box with the specified message, title, button options, and icon. void Show(string message, string title, MessageBoxButton button, MessageBoxImage icon) Parameters message string The text to display in the message box. title string The title of the message box window. button MessageBoxButton The button options to display in the message box, such as OK or Cancel. icon MessageBoxImage The icon to display in the message box, such as an information or error icon."
  },
  "api/NucleusWPF.MVVM.IRelayCommand.html": {
    "href": "api/NucleusWPF.MVVM.IRelayCommand.html",
    "title": "Interface IRelayCommand | NucleusWPF.MVVM",
    "summary": "Interface IRelayCommand Namespace NucleusWPF.MVVM Assembly NucleusWPF.MVVM.dll Represents a command that can be executed and provides a mechanism to notify changes in its ability to execute. public interface IRelayCommand : ICommand Inherited Members ICommand.CanExecute(object) ICommand.Execute(object) ICommand.CanExecuteChanged Remarks This interface extends ICommand by adding the RaiseCanExecuteChanged() method, which allows manual triggering of the CanExecuteChanged event. This is useful in scenarios where the command's ability to execute depends on external conditions that may change dynamically. Methods RaiseCanExecuteChanged() void RaiseCanExecuteChanged()"
  },
  "api/NucleusWPF.MVVM.IWindowService.html": {
    "href": "api/NucleusWPF.MVVM.IWindowService.html",
    "title": "Interface IWindowService | NucleusWPF.MVVM",
    "summary": "Interface IWindowService Namespace NucleusWPF.MVVM Assembly NucleusWPF.MVVM.dll Provides functionality for creating new windows. public interface IWindowService Properties DefaultViewSuffix Gets or sets the default suffix appended to view names. string DefaultViewSuffix { get; set; } Property Value string Methods Register<TViewModel, TWindow>() Registers an explicit mapping between aa View and its ViewModel. void Register<TViewModel, TWindow>() where TViewModel : class where TWindow : Window Type Parameters TViewModel ViewModel to register. TWindow View to map. Show(object, string?) Opens a View with its datacontext as its assosiated ViewModel. void Show(object viewModel, string? suffix = null) Parameters viewModel object Assosiated ViewModel suffix string Suffix for View, DefaultViewSuffix is used if null. ShowDialog(object, string?) Opens a View with its datacontext as its assosiated ViewModel. bool? ShowDialog(object viewModel, string? suffix = null) Parameters viewModel object Assosiated ViewModel suffix string Suffix for View, DefaultViewSuffix is used if null. Returns bool? Returns the DialogResult of view ShowDialog<TViewModel>(string?) OPens a View with its datacontext as its assosiated ViewModel. bool? ShowDialog<TViewModel>(string? suffix = null) where TViewModel : class Parameters suffix string Suffix for View, DefaultViewSuffix if null is used Returns bool? Returns the DialogResult of view Type Parameters TViewModel Assosiated ViewModel as type Show<TViewModel>(string?) OPens a View with its datacontext as its assosiated ViewModel. void Show<TViewModel>(string? suffix = null) where TViewModel : class Parameters suffix string Suffix for View, DefaultViewSuffix if null is used Type Parameters TViewModel Assosiated ViewModel as type"
  },
  "api/NucleusWPF.MVVM.MessageService.html": {
    "href": "api/NucleusWPF.MVVM.MessageService.html",
    "title": "Class MessageService | NucleusWPF.MVVM",
    "summary": "Class MessageService Namespace NucleusWPF.MVVM Assembly NucleusWPF.MVVM.dll Provides methods for displaying messages and exceptions to the user using WPF message boxes. Implements the IMessageService interface. public class MessageService : IMessageService Inheritance object MessageService Implements IMessageService Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Show(Exception) Displays an exception message to the user in a message box. public virtual void Show(Exception ex) Parameters ex Exception The exception to display. Show(string, string, MessageBoxButton, MessageBoxImage) Displays a message box with the specified message, title, button options, and icon. public virtual void Show(string message, string title, MessageBoxButton button, MessageBoxImage icon) Parameters message string The text to display in the message box. title string The title of the message box window. button MessageBoxButton The button options to display in the message box, such as OK or Cancel. icon MessageBoxImage The icon to display in the message box, such as an information or error icon."
  },
  "api/NucleusWPF.MVVM.RelayCommand-1.html": {
    "href": "api/NucleusWPF.MVVM.RelayCommand-1.html",
    "title": "Class RelayCommand<T> | NucleusWPF.MVVM",
    "summary": "Class RelayCommand<T> Namespace NucleusWPF.MVVM Assembly NucleusWPF.MVVM.dll Implementation of IRelayCommand that supports synchronous execution with a strongly-typed parameter. public sealed class RelayCommand<T> : IRelayCommand, ICommand Type Parameters T The type of the command parameter. Inheritance object RelayCommand<T> Implements IRelayCommand ICommand Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors RelayCommand(Action<T>) Initializes a new instance of the RelayCommand<T> class with the specified execute action. public RelayCommand(Action<T> execute) Parameters execute Action<T> Action to be executed when invoked. Remarks This constructor creates a RelayCommand<T> that is always enabled. Use the overload with a canExecute predicate to specify conditions under which the command is enabled. RelayCommand(Action<T>, Func<bool>) Initializes a new instance of the RelayCommand<T> class with the specified execute action and can-execute predicate. public RelayCommand(Action<T> execute, Func<bool> canExecute) Parameters execute Action<T> Action to be executed when invoked. canExecute Func<bool> Determines whether the command can execute. RelayCommand(Action<T>, Func<T, bool>) Initializes a new instance of the RelayCommand<T> class with the specified execute action and can-execute predicate. public RelayCommand(Action<T> execute, Func<T, bool> canExecute) Parameters execute Action<T> Action to be executed when invoked. canExecute Func<T, bool> Determines whether the command can execute for the given parameter. Exceptions ArgumentNullException Methods CanExecute(object?) Defines the method that determines whether the command can execute in its current state. public bool CanExecute(object? parameter) Parameters parameter object Data used by the command. If the command does not require data to be passed, this object can be set to null. Returns bool true if this command can be executed; otherwise, false. Execute(object?) Defines the method to be called when the command is invoked. public void Execute(object? parameter) Parameters parameter object Data used by the command. If the command does not require data to be passed, this object can be set to null. RaiseCanExecuteChanged() Raises the CanExecuteChanged event. public void RaiseCanExecuteChanged() Events CanExecuteChanged Occurs when changes occur that affect whether or not the command should execute. public event EventHandler? CanExecuteChanged Event Type EventHandler"
  },
  "api/NucleusWPF.MVVM.RelayCommand.html": {
    "href": "api/NucleusWPF.MVVM.RelayCommand.html",
    "title": "Class RelayCommand | NucleusWPF.MVVM",
    "summary": "Class RelayCommand Namespace NucleusWPF.MVVM Assembly NucleusWPF.MVVM.dll Implementation of IRelayCommand that supports synchronous execution. public sealed class RelayCommand : IRelayCommand, ICommand Inheritance object RelayCommand Implements IRelayCommand ICommand Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors RelayCommand(Action) Initializes a new instance of the RelayCommand class with the specified execute action. public RelayCommand(Action execute) Parameters execute Action Action to be executed when invoked. Remarks This constructor creates a RelayCommand that is always enabled. Use the overload with a canExecute predicate to specify conditions under which the command is enabled. RelayCommand(Action, Func<bool>) Initializes a new instance of the RelayCommand class with the specified execute action and can-execute predicate. public RelayCommand(Action execute, Func<bool> canExecute) Parameters execute Action Action to be executed when invoked. canExecute Func<bool> Determines whether the command can execute. Exceptions ArgumentNullException Methods CanExecute(object?) Defines the method that determines whether the command can execute in its current state. public bool CanExecute(object? parameter) Parameters parameter object Data used by the command. If the command does not require data to be passed, this object can be set to null. Returns bool true if this command can be executed; otherwise, false. Execute(object?) Defines the method to be called when the command is invoked. public void Execute(object? parameter) Parameters parameter object Data used by the command. If the command does not require data to be passed, this object can be set to null. RaiseCanExecuteChanged() Raises the CanExecuteChanged event. public void RaiseCanExecuteChanged() Events CanExecuteChanged Occurs when changes occur that affect whether or not the command should execute. public event EventHandler? CanExecuteChanged Event Type EventHandler"
  },
  "api/NucleusWPF.MVVM.ValidViewModel.html": {
    "href": "api/NucleusWPF.MVVM.ValidViewModel.html",
    "title": "Class ValidViewModel | NucleusWPF.MVVM",
    "summary": "Class ValidViewModel Namespace NucleusWPF.MVVM Assembly NucleusWPF.MVVM.dll Implementation of INotifyDataErrorInfo and INotifyPropertyChanged. public abstract class ValidViewModel : ViewModelBase, INotifyPropertyChanged, INotifyDataErrorInfo Inheritance object ViewModelBase ValidViewModel Implements INotifyPropertyChanged INotifyDataErrorInfo Inherited Members ViewModelBase.PropertyChanged ViewModelBase.RaisePropertyChanged(string) ViewModelBase.RaiseAndSetIfChanged<T>(ref T, T, string) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties HasErrors Gets a value that indicates whether the entity has validation errors. public bool HasErrors { get; } Property Value bool true if the entity currently has validation errors; otherwise, false. Methods AddError(string, string?) Attach an error to a property. protected void AddError(string error, string? propertyName = null) Parameters error string Error message to attach. propertyName string Name of property. ClearErrors(string?) Remove all errors attached to a property. protected void ClearErrors(string? propertyName = null) Parameters propertyName string Name of property. GetErrors(string?) Gets a list of errors attached to property. public IEnumerable GetErrors(string? propertyName = null) Parameters propertyName string Name of property Returns IEnumerable An IEnumerable of errors messages for specified property, or empty collection if there are no errors. RaiseErrorsChanged(string?) Raises the ErrorsChanged event. protected void RaiseErrorsChanged(string? propertyName = null) Parameters propertyName string Name of changed property. RaseAndValidateIfChanged<T>(ref T, T, Action<T, string?>, string?) Updates the target property if the specified value is different, raises a property change notification, and performs validation on the new value. protected void RaseAndValidateIfChanged<T>(ref T targetProperty, T value, Action<T, string?> validate, string? propertyName = null) Parameters targetProperty T A reference to the property to be updated. value T The new value to assign to the property. validate Action<T, string> An action to validate the new value. The action receives the new value and the property name as parameters. propertyName string The name of the property being updated. This is automatically supplied by the caller if not explicitly provided. Type Parameters T The type of the property being updated. Events ErrorsChanged Occurs when the validation errors have changed for a property or for the entire entity. public event EventHandler<DataErrorsChangedEventArgs>? ErrorsChanged Event Type EventHandler<DataErrorsChangedEventArgs>"
  },
  "api/NucleusWPF.MVVM.ViewModelBase.html": {
    "href": "api/NucleusWPF.MVVM.ViewModelBase.html",
    "title": "Class ViewModelBase | NucleusWPF.MVVM",
    "summary": "Class ViewModelBase Namespace NucleusWPF.MVVM Assembly NucleusWPF.MVVM.dll Implementation of INotifyPropertyChanged. public abstract class ViewModelBase : INotifyPropertyChanged Inheritance object ViewModelBase Implements INotifyPropertyChanged Derived ValidViewModel Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods RaiseAndSetIfChanged<T>(ref T, T, string?) Updates the specified property with a new value and raises a property change notification if the value has changed. protected void RaiseAndSetIfChanged<T>(ref T targetProperty, T value, string? propertyName = null) Parameters targetProperty T A reference to the backing field of the property to update. value T The new value to assign to the property. propertyName string The name of the property to raise the change notification for. This is automatically provided by the compiler if not explicitly specified, using the caller's member name. Type Parameters T The type of the property being updated. RaisePropertyChanged(string?) Raises the PropertyChanged event for the specified property. protected void RaisePropertyChanged(string? propertyName = null) Parameters propertyName string Name of changed property. Events PropertyChanged Occurs when a property value changes. public event PropertyChangedEventHandler? PropertyChanged Event Type PropertyChangedEventHandler"
  },
  "api/NucleusWPF.MVVM.WindowService.html": {
    "href": "api/NucleusWPF.MVVM.WindowService.html",
    "title": "Class WindowService | NucleusWPF.MVVM",
    "summary": "Class WindowService Namespace NucleusWPF.MVVM Assembly NucleusWPF.MVVM.dll Provides functionality for creating and displaying WPF windows associated with view models. Supports explicit view/viewmodel mapping and automatic view resolution by naming convention. public class WindowService : IWindowService Inheritance object WindowService Implements IWindowService Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties DefaultViewSuffix Gets or sets the default suffix appended to view names. public string DefaultViewSuffix { get; set; } Property Value string Instance public static IWindowService Instance { get; } Property Value IWindowService Methods Register<TViewModel, TWindow>() Registers an explicit mapping between aa View and its ViewModel. public void Register<TViewModel, TWindow>() where TViewModel : class where TWindow : Window Type Parameters TViewModel ViewModel to register. TWindow View to map. Show(object, string?) Opens a View with its datacontext as its assosiated ViewModel. public void Show(object viewModel, string? suffix = null) Parameters viewModel object Assosiated ViewModel suffix string Suffix for View, DefaultViewSuffix is used if null. ShowDialog(object, string?) Opens a View with its datacontext as its assosiated ViewModel. public bool? ShowDialog(object viewModel, string? suffix = null) Parameters viewModel object Assosiated ViewModel suffix string Suffix for View, DefaultViewSuffix is used if null. Returns bool? Returns the DialogResult of view ShowDialog<TViewModel>(string?) OPens a View with its datacontext as its assosiated ViewModel. public bool? ShowDialog<TViewModel>(string? suffix = null) where TViewModel : class Parameters suffix string Suffix for View, DefaultViewSuffix if null is used Returns bool? Returns the DialogResult of view Type Parameters TViewModel Assosiated ViewModel as type Show<TViewModel>(string?) OPens a View with its datacontext as its assosiated ViewModel. public void Show<TViewModel>(string? suffix = null) where TViewModel : class Parameters suffix string Suffix for View, DefaultViewSuffix if null is used Type Parameters TViewModel Assosiated ViewModel as type"
  },
  "api/NucleusWPF.MVVM.html": {
    "href": "api/NucleusWPF.MVVM.html",
    "title": "Namespace NucleusWPF.MVVM | NucleusWPF.MVVM",
    "summary": "Namespace NucleusWPF.MVVM Classes AsyncRelayCommand Implmentation of ICommand that supports asynchronous execution. AsyncRelayCommand<T> Implentation of ICommand that supports asynchronous execution. DependencyInjection Provides a dependency injection container for transient and singleton servies and models. MessageService Provides methods for displaying messages and exceptions to the user using WPF message boxes. Implements the IMessageService interface. RelayCommand Implementation of IRelayCommand that supports synchronous execution. RelayCommand<T> Implementation of IRelayCommand that supports synchronous execution with a strongly-typed parameter. ValidViewModel Implementation of INotifyDataErrorInfo and INotifyPropertyChanged. ViewModelBase Implementation of INotifyPropertyChanged. WindowService Provides functionality for creating and displaying WPF windows associated with view models. Supports explicit view/viewmodel mapping and automatic view resolution by naming convention. Interfaces IMessageService Defines methods for displaying messages to the user. IRelayCommand Represents a command that can be executed and provides a mechanism to notify changes in its ability to execute. IWindowService Provides functionality for creating new windows."
  },
  "docs/DependencyInjection.html": {
    "href": "docs/DependencyInjection.html",
    "title": "DependencyInjection | NucleusWPF.MVVM",
    "summary": "DependencyInjection The DependencyInjection class in NucleusWPF.MVVM provides a simple dependency injection container for services and view models in your WPF application. It supports both transient and singleton lifetimes. Registering Services By default, build int services are already registered such as IMessageService. If you need to register additional services, there are a few ways to do so. Transient/Scoped Services In the \"App.xaml.cs\" file, you can register services using the Reegister method. DependencyInjection.Instance.Register<IServiceName, ServiceName>(); Singleton Services \"In the \"App.xaml.cs\" file, you ster singleton services using the RegisterSingleton methods. DendencyInjection.Instance.RegisterSingleton<IServiceName, ServiceName>(); Alternatively, you can use the RegisterSingleton method with an instance of the service: DependencyInjection.Instance.RegisterSingleton<IServiceName>(new ServiceName()); Retrieving Services & ViewModels Services and ViewModels are retreed using the same method. When ViewModels are initialized this way, DependencyInjection container will automatically resolve any dependencies it contains. var service = DependencyInjection.Instance.Resolve<IServiceName>(); var viewModel = DependencyInjection.Instance.Resolve<ViewModelName>(); To ensure ensure ViewModels are properly initialized, the constructor should contains all required dependencies. If there is more than one constructor, the container will use the one with the most parameters. public class ExampleViewMode(IMessageService _messageService) : ViewModelBase { public void SendMessage() { _messageService.Show(\"Hello World!\", \"Hello\", MessageBoxButton.OK, MessageBoxImage.Information); } }"
  },
  "docs/IWindowService.html": {
    "href": "docs/IWindowService.html",
    "title": "IWindowService | NucleusWPF.MVVM",
    "summary": "IWindowService Interface for managing windows in a WPF application. Allows for loose coupling between Views and ViewModels. Mapping ViewModels to Views Although IWindowService uses implicit mapping based on MVVM naming conventions. A ViewModel can be registered to a View explicitly using the Register method. var messageService = DependencyInjection.Instance.Resolve<IWindowService>(); messageService.Register<TViewModel, TWindow>(); Opening a Window Similar to WPF bulit in method. IWindowService provides two methods for opening windows. Show Method If you want to open a window but don't want the calling window to bocked by the new one use Show method. _windowService.Show<ExampleViewMode>(); Alternatively if you need to pass data to the ViewModel the following method can be used. var viewModel = DependencyInjection.Instance.Resolve<ExampleViewModel>(); viewModel.Data = \"Here is some sample data\"; _windowService.Show(viewModel); ShowDialog Method If you want to open a window and wait for it to be closed before continuing use ShowDialog method. _windowService.ShowDialog<ExampleViewMode>(); Alternatively if you need to pass or read data from the ViewModel the following method can be used. var viewModel = DependencyInjection.Instance.Resolve<ExampleViewModel>(); viewModel.Data = \"Here is some sample data\"; if (_windowService.ShowDialog(viewModel) == true) { // Do something with the result var resultData = viewModel.ResultData; }"
  },
  "docs/ValidViewModel.html": {
    "href": "docs/ValidViewModel.html",
    "title": "ValidViewModel | NucleusWPF.MVVM",
    "summary": "ValidViewModel Provides an implementation of INotifyDataErrorInfo and extends ViewModelBase for validation scenarios in MVVM applications. How to use Inherit the 'ValidViewModel' class in your ViewModel. Adding or removing errors from a property will notify the view. namespace ExampleProject.ViewModels { public class ExampleViewModel : ValidViewModel { private int numInput; public int NumInput { get => numInputs; set => RaiseAndValidateIfChanged(ref numInput, value, ValidateExceedsZero); } private void ValidateExceedsZero(int value, string? propertyName) { ClearErrors(propertyName); if (value <= 0) AddError(\"Value must be greater than zero.\", propertyName); } } }"
  },
  "docs/ViewModelBase.html": {
    "href": "docs/ViewModelBase.html",
    "title": "ViewModelBase | NucleusWPF.MVVM",
    "summary": "ViewModelBase Implmentation of INotifyPropertyChanged for property change notifications in MVVM. How to use Simply inherit from ViewModelBase in your ViewModel classes. It provides the needed functionality to raise property change notifications. namespace ExampleProject.ViewModels { public class ExampleViewModel : ViewModelBase { private int _myNumValue; public int MyNumValue { get => _myNumValue; set { RaiseAndSetIfChanged(ref _myNumValue, value); RaisePropertyChanged(nameof(DoubleOutput)); // Notify that DoubleOutput has changed } } public int DoubleOutput => MyNumValue * 2; } }"
  },
  "index.html": {
    "href": "index.html",
    "title": "NucleusWPF.MVVM | NucleusWPF.MVVM",
    "summary": "NucleusWPF.MVVM A lightweight MVVM utility library for WPF applications targeting .NET 8. Provides essential services, dependency injection, and command implementations to streamline WPF development. Features Dependency Injection: Simple container for registering and resolving services and view models (singleton and transient). Message Service: Interface and implementation for displaying messages and exceptions to users. Window Service: Interface and implementation for mapping and displaying windows based on view models. RelayCommand / AsyncRelayCommand: Synchronous and asynchronous command implementations for use in MVVM. ViewModelBase: Base class implementing INotifyPropertyChanged for property change notifications. ValidViewModel: Base class implementing INotifyDataErrorInfo for validation scenarios. Getting Started Prerequisites .NET 8 SDK WPF project (Windows only) Installation Clone or add the NucleusWPF.MVVM project to your solution: Usage DependencyInjection Registering Services Transient/Scoped Services Singleton Services Retrieving Services & ViewModels IWindowService Mapping ViewModels to Views Opening a Window Show Method ShowDialog Method"
  }
}